{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Standard-Configuration","level":2,"type":"heading","text":"Standard Configuration"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When you inherit "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController"},{"type":"text","text":" and launch your extension, the controller will by default be configured with a bunch of observable properties and services."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All properties will be injected into the view hierarchy when you setup KeyboardKit with a view which means that you can create environment objects that observe the state of these properties."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All services will be configured with standard implementations, such as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/StandardKeyboardActionHandler"},{"type":"text","text":", but can be replaced with your own custom implementations."}]},{"anchor":"How-to-observe-a-context","level":2,"type":"heading","text":"How to observe a context"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To observe a context in any SwiftUI view, you just have to use "},{"type":"codeVoice","code":"@EnvironmentObject"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["struct MyView: View {","","    @EnvironmentObject private var context: KeyboardContext","","    var body: some View {","        ...","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI will automatically resolve the correct instance and start observing its state."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also inject the context in the view initializer and setup an "},{"type":"codeVoice","code":"@ObservedObject"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["struct MyView: View {","    ","    init(context: KeyboardContext) {","       _context = ObservedObject(wrappedValue: context)","    }","    ","    @ObservedObject private var context: KeyboardContext","    ","    var body: some View {","        ...","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use any of these options as you see fit. KeyboardKit itself use init injection since that makes dependencies more explicit."}]},{"anchor":"How-to-access-a-service","level":2,"type":"heading","text":"How to access a service"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike contexts, services can not be resolved using environment objects. You must instead inject any services you want to use into the views you want to use it in:"}]},{"type":"codeListing","syntax":"swift","code":["struct MyView: View {","","    \/\/ You don't need an initializer if the type is in the same target","    init(actionHandler: KeyboardActionHandler) {","        self.actionHandler = actionHandler","    }","","    private let actionHandler: KeyboardActionHandler","","    var body: some View {","        Button(action: { actionHandler.handle(.tap, on: .space) }) {","            Text(\"Custom space bar\")","                .padding()","                .background(Color.green)","                .cornerRadius(10)","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the example above, the view uses an injected action handler to trigger a “tap on space”."}]},{"anchor":"How-to-customize-the-standard-configuration","level":2,"type":"heading","text":"How to customize the standard configuration"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can easily customize the standard configuration, by replacing the standard services with your own custom implementations."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For instance, say that you have a custom action handler:"}]},{"type":"codeListing","syntax":"swift","code":["class MyActionHandler: StandardActionHandler {","","    open override func canHandle(_ gesture: KeyboardGesture, on action: KeyboardAction) -> Bool {","        false   \/\/ Wow, what a useless action handler! ","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can now use this action handler instead of the standard one, by setting "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/keyboardActionHandler"},{"type":"text","text":" to that new type:"}]},{"type":"codeListing","syntax":"swift","code":["class MyKeyboardViewController: KeyboardInputViewController {","","    override func viewDidLoad() {","        keyboardActionHandler = MyActionHandler(inputViewController: self)","        super.viewDidLoad()","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You should inject your custom services in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/viewDidLoad()"},{"type":"text","text":", before any other services have been resolved. That way, any inter-dependencies between the services will be properly resolved. If you want to configure KeyboardKit at a later state, make sure that the service that you replace isn’t used in any other services."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a service that you want to replace with a custom instance is already being used by another service, you must re-create that service as well, to avoid having the old service instance still hanging around."}]}]}],"schemaVersion":{"major":0,"minor":2,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/keyboardkit\/going-further"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Going-Further","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"This article discusses how to configure KeyboardKit and add your own logic to the mix."}],"kind":"article","metadata":{"roleHeading":"Article","title":"Going Further","role":"article","modules":[{"name":"KeyboardKit"}]},"hierarchy":{"paths":[["doc:\/\/KeyboardKit\/documentation\/KeyboardKit"]]},"seeAlsoSections":[{"title":"Articles","identifiers":["doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Getting-Started","doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Keyboard-Actions","doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Keyboard-Appearance","doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Keyboard-Feedback","doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Keyboard-Input-Sets","doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Keyboard-Layout","doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Keyboard-Localization","doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Autocomplete"],"generated":true}],"references":{"doc://KeyboardKit/documentation/KeyboardKit/Understanding-Keyboard-Localization":{"role":"article","title":"Understanding Keyboard Localization","abstract":[{"type":"text","text":"This article describes the KeyboardKit localization model and how to use it."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Keyboard-Localization","kind":"article","type":"topic","url":"\/documentation\/keyboardkit\/understanding-keyboard-localization"},"doc://KeyboardKit/documentation/KeyboardKit/Understanding-Keyboard-Appearance":{"role":"article","title":"Understanding Keyboard Appearance","abstract":[{"type":"text","text":"This article describes the KeyboardKit appearance model and how to use it."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Keyboard-Appearance","kind":"article","type":"topic","url":"\/documentation\/keyboardkit\/understanding-keyboard-appearance"},"doc://KeyboardKit/documentation/KeyboardKit/Understanding-Autocomplete":{"role":"article","title":"Understanding Autocomplete","abstract":[{"type":"text","text":"This article describes the KeyboardKit autocomplete model and how to use it."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Autocomplete","kind":"article","type":"topic","url":"\/documentation\/keyboardkit\/understanding-autocomplete"},"doc://KeyboardKit/documentation/KeyboardKit/Understanding-Keyboard-Feedback":{"role":"article","title":"Understanding Keyboard Feedback","abstract":[{"type":"text","text":"This article describes the KeyboardKit feedback model and how to use it."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Keyboard-Feedback","kind":"article","type":"topic","url":"\/documentation\/keyboardkit\/understanding-keyboard-feedback"},"doc://KeyboardKit/documentation/KeyboardKit/Understanding-Keyboard-Input-Sets":{"role":"article","title":"Understanding Keyboard Input Sets","abstract":[{"type":"text","text":"This article describes the KeyboardKit input set concept and how to use it."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Keyboard-Input-Sets","kind":"article","type":"topic","url":"\/documentation\/keyboardkit\/understanding-keyboard-input-sets"},"doc://KeyboardKit/documentation/KeyboardKit":{"role":"collection","title":"KeyboardKit","abstract":[{"type":"text","text":"KeyboardKit helps you build custom keyboards with Swift and SwiftUI."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit","kind":"symbol","type":"topic","url":"\/documentation\/keyboardkit"},"doc://KeyboardKit/documentation/KeyboardKit/Getting-Started":{"role":"article","title":"Getting started","abstract":[{"type":"text","text":"This article discusses how to install KeyboardKit and get started using it in your app."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Getting-Started","kind":"article","type":"topic","url":"\/documentation\/keyboardkit\/getting-started"},"doc://KeyboardKit/documentation/KeyboardKit/Understanding-Keyboard-Actions":{"role":"article","title":"Understanding Keyboard Actions","abstract":[{"type":"text","text":"This article describes keyboard actions and how to use action handlers."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Keyboard-Actions","kind":"article","type":"topic","url":"\/documentation\/keyboardkit\/understanding-keyboard-actions"},"doc://KeyboardKit/documentation/KeyboardKit/KeyboardInputViewController/keyboardActionHandler":{"role":"symbol","title":"keyboardActionHandler","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"keyboardActionHandler"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"KeyboardActionHandler","preciseIdentifier":"s:11KeyboardKit0A13ActionHandlerP"}],"abstract":[{"type":"text","text":"This action handler is used to handle actions that will"},{"type":"text","text":" "},{"type":"text","text":"be triggered when the keyboard is being."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/keyboardActionHandler","kind":"symbol","type":"topic","url":"\/documentation\/keyboardkit\/keyboardinputviewcontroller\/keyboardactionhandler"},"doc://KeyboardKit/documentation/KeyboardKit/Understanding-Keyboard-Layout":{"role":"article","title":"Understanding Keyboard Layouts","abstract":[{"type":"text","text":"This article describes the KeyboardKit keyboard layout concept and how to use it."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/Understanding-Keyboard-Layout","kind":"article","type":"topic","url":"\/documentation\/keyboardkit\/understanding-keyboard-layout"},"doc://KeyboardKit/documentation/KeyboardKit/StandardKeyboardActionHandler":{"role":"symbol","title":"StandardKeyboardActionHandler","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"StandardKeyboardActionHandler"}],"abstract":[{"type":"text","text":"This standard keyboard action handler is used by default by"},{"type":"text","text":" "},{"type":"text","text":"KeyboardKit and provides a standard way of handling actions."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/StandardKeyboardActionHandler","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"StandardKeyboardActionHandler"}],"url":"\/documentation\/keyboardkit\/standardkeyboardactionhandler"},"doc://KeyboardKit/documentation/KeyboardKit/KeyboardInputViewController":{"role":"symbol","title":"KeyboardInputViewController","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"KeyboardInputViewController"}],"abstract":[{"type":"text","text":"This class extends "},{"type":"codeVoice","code":"UIInputViewController"},{"type":"text","text":" with KeyboardKit"},{"type":"text","text":" "},{"type":"text","text":"specific functionality."}],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"KeyboardInputViewController"}],"url":"\/documentation\/keyboardkit\/keyboardinputviewcontroller"},"doc://KeyboardKit/documentation/KeyboardKit/KeyboardInputViewController/viewDidLoad()":{"role":"symbol","title":"viewDidLoad()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"viewDidLoad"},{"kind":"text","text":"()"}],"abstract":[],"identifier":"doc:\/\/KeyboardKit\/documentation\/KeyboardKit\/KeyboardInputViewController\/viewDidLoad()","kind":"symbol","type":"topic","url":"\/documentation\/keyboardkit\/keyboardinputviewcontroller\/viewdidload()"}}}